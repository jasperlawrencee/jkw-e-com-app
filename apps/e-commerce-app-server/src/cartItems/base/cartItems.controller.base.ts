/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CartItemsService } from "../cartItems.service";
import { CartItemsCreateInput } from "./CartItemsCreateInput";
import { CartItems } from "./CartItems";
import { CartItemsFindManyArgs } from "./CartItemsFindManyArgs";
import { CartItemsWhereUniqueInput } from "./CartItemsWhereUniqueInput";
import { CartItemsUpdateInput } from "./CartItemsUpdateInput";

export class CartItemsControllerBase {
  constructor(protected readonly service: CartItemsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CartItems })
  async createCartItems(
    @common.Body() data: CartItemsCreateInput
  ): Promise<CartItems> {
    return await this.service.createCartItems({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CartItems] })
  @ApiNestedQuery(CartItemsFindManyArgs)
  async cartItemsItems(@common.Req() request: Request): Promise<CartItems[]> {
    const args = plainToClass(CartItemsFindManyArgs, request.query);
    return this.service.cartItemsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CartItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cartItems(
    @common.Param() params: CartItemsWhereUniqueInput
  ): Promise<CartItems | null> {
    const result = await this.service.cartItems({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CartItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCartItems(
    @common.Param() params: CartItemsWhereUniqueInput,
    @common.Body() data: CartItemsUpdateInput
  ): Promise<CartItems | null> {
    try {
      return await this.service.updateCartItems({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CartItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCartItems(
    @common.Param() params: CartItemsWhereUniqueInput
  ): Promise<CartItems | null> {
    try {
      return await this.service.deleteCartItems({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
