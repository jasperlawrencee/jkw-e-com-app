/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderItemsService } from "../orderItems.service";
import { OrderItemsCreateInput } from "./OrderItemsCreateInput";
import { OrderItems } from "./OrderItems";
import { OrderItemsFindManyArgs } from "./OrderItemsFindManyArgs";
import { OrderItemsWhereUniqueInput } from "./OrderItemsWhereUniqueInput";
import { OrderItemsUpdateInput } from "./OrderItemsUpdateInput";

export class OrderItemsControllerBase {
  constructor(protected readonly service: OrderItemsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderItems })
  async createOrderItems(
    @common.Body() data: OrderItemsCreateInput
  ): Promise<OrderItems> {
    return await this.service.createOrderItems({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderItems] })
  @ApiNestedQuery(OrderItemsFindManyArgs)
  async orderItemsItems(@common.Req() request: Request): Promise<OrderItems[]> {
    const args = plainToClass(OrderItemsFindManyArgs, request.query);
    return this.service.orderItemsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orderItems(
    @common.Param() params: OrderItemsWhereUniqueInput
  ): Promise<OrderItems | null> {
    const result = await this.service.orderItems({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrderItems(
    @common.Param() params: OrderItemsWhereUniqueInput,
    @common.Body() data: OrderItemsUpdateInput
  ): Promise<OrderItems | null> {
    try {
      return await this.service.updateOrderItems({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrderItems(
    @common.Param() params: OrderItemsWhereUniqueInput
  ): Promise<OrderItems | null> {
    try {
      return await this.service.deleteOrderItems({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
