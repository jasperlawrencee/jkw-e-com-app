/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductsService } from "../products.service";
import { ProductsCreateInput } from "./ProductsCreateInput";
import { Products } from "./Products";
import { ProductsFindManyArgs } from "./ProductsFindManyArgs";
import { ProductsWhereUniqueInput } from "./ProductsWhereUniqueInput";
import { ProductsUpdateInput } from "./ProductsUpdateInput";

export class ProductsControllerBase {
  constructor(protected readonly service: ProductsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Products })
  async createProducts(
    @common.Body() data: ProductsCreateInput
  ): Promise<Products> {
    return await this.service.createProducts({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Products] })
  @ApiNestedQuery(ProductsFindManyArgs)
  async productsItems(@common.Req() request: Request): Promise<Products[]> {
    const args = plainToClass(ProductsFindManyArgs, request.query);
    return this.service.productsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Products })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async products(
    @common.Param() params: ProductsWhereUniqueInput
  ): Promise<Products | null> {
    const result = await this.service.products({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Products })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProducts(
    @common.Param() params: ProductsWhereUniqueInput,
    @common.Body() data: ProductsUpdateInput
  ): Promise<Products | null> {
    try {
      return await this.service.updateProducts({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Products })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProducts(
    @common.Param() params: ProductsWhereUniqueInput
  ): Promise<Products | null> {
    try {
      return await this.service.deleteProducts({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
