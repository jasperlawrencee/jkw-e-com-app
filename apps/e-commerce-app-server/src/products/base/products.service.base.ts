/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Products as PrismaProducts } from "@prisma/client";

export class ProductsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProductsCountArgs, "select">): Promise<number> {
    return this.prisma.products.count(args);
  }

  async productsItems<T extends Prisma.ProductsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductsFindManyArgs>
  ): Promise<PrismaProducts[]> {
    return this.prisma.products.findMany<Prisma.ProductsFindManyArgs>(args);
  }
  async products<T extends Prisma.ProductsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductsFindUniqueArgs>
  ): Promise<PrismaProducts | null> {
    return this.prisma.products.findUnique(args);
  }
  async createProducts<T extends Prisma.ProductsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductsCreateArgs>
  ): Promise<PrismaProducts> {
    return this.prisma.products.create<T>(args);
  }
  async updateProducts<T extends Prisma.ProductsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductsUpdateArgs>
  ): Promise<PrismaProducts> {
    return this.prisma.products.update<T>(args);
  }
  async deleteProducts<T extends Prisma.ProductsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductsDeleteArgs>
  ): Promise<PrismaProducts> {
    return this.prisma.products.delete(args);
  }
}
