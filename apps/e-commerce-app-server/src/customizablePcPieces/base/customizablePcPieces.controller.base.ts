/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomizablePcPiecesService } from "../customizablePcPieces.service";
import { CustomizablePcPiecesCreateInput } from "./CustomizablePcPiecesCreateInput";
import { CustomizablePcPieces } from "./CustomizablePcPieces";
import { CustomizablePcPiecesFindManyArgs } from "./CustomizablePcPiecesFindManyArgs";
import { CustomizablePcPiecesWhereUniqueInput } from "./CustomizablePcPiecesWhereUniqueInput";
import { CustomizablePcPiecesUpdateInput } from "./CustomizablePcPiecesUpdateInput";

export class CustomizablePcPiecesControllerBase {
  constructor(protected readonly service: CustomizablePcPiecesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomizablePcPieces })
  async createCustomizablePcPieces(
    @common.Body() data: CustomizablePcPiecesCreateInput
  ): Promise<CustomizablePcPieces> {
    return await this.service.createCustomizablePcPieces({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomizablePcPieces] })
  @ApiNestedQuery(CustomizablePcPiecesFindManyArgs)
  async customizablePcPiecesItems(
    @common.Req() request: Request
  ): Promise<CustomizablePcPieces[]> {
    const args = plainToClass(CustomizablePcPiecesFindManyArgs, request.query);
    return this.service.customizablePcPiecesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomizablePcPieces })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customizablePcPieces(
    @common.Param() params: CustomizablePcPiecesWhereUniqueInput
  ): Promise<CustomizablePcPieces | null> {
    const result = await this.service.customizablePcPieces({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomizablePcPieces })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomizablePcPieces(
    @common.Param() params: CustomizablePcPiecesWhereUniqueInput,
    @common.Body() data: CustomizablePcPiecesUpdateInput
  ): Promise<CustomizablePcPieces | null> {
    try {
      return await this.service.updateCustomizablePcPieces({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomizablePcPieces })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomizablePcPieces(
    @common.Param() params: CustomizablePcPiecesWhereUniqueInput
  ): Promise<CustomizablePcPieces | null> {
    try {
      return await this.service.deleteCustomizablePcPieces({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
